// Version: 1.0.0
type AssocList<K, V> = List<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type ExternalCollection__1 = {id : Text; name : Text};
type Hash = Nat32;
type InternalCollection__1 = {id : Text; name : Text};
type Key<K> = {hash : Hash; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key<K>, V>; size : Nat};
type List<T> = ?(T, List<T>);
type Status__1 = {#Active; #Canceled; #Finished; #OnHold};
type Tournament =
  {
    boostsSetAt : Text;
    boostsSetPer : Text;
    description : Text;
    dynamicExplanation : Text;
    endDate : Text;
    externalCollections : [ExternalCollection__1];
    game : Text;
    internalCollections : [InternalCollection__1];
    name : Text;
    points : Nat;
    reward : Text;
    startDate : Text;
    status : Status__1
  };
type TournamentPlayerStats =
  {
    earned : Nat;
    lost : Nat;
    matchesLost : Nat;
    matchesWon : Nat;
    points : {externalResults : ?Nat; internalResults : ?Nat}
  };
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var admins : [Principal];
  stable environment : Text;
  stable var stTournamentPlayerStats :
    [(Text, Principal, TournamentPlayerStats)];
  stable var tournaments :
    {
      #branch : Branch<Text, Tournament>;
      #empty;
      #leaf : Leaf<Text, Tournament>
    }
};
