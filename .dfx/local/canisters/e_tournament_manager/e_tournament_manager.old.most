// Version: 1.0.0
type AssocList<K, V> = List__1<(K, V)>;
type AssocList__1<K, V> = AssocList<K, V>;
type Branch<K, V> = {left : Trie<K, V>; right : Trie<K, V>; size : Nat};
type ExternalCollection__1 = {id : Text; name : Text};
type Hash__1 = Nat32;
type InternalCollection__1 = {id : Text; name : Text};
type Key__1<K> = {hash : Hash__1; key : K};
type Leaf<K, V> = {keyvals : AssocList__1<Key__1<K>, V>; size : Nat};
type List__1<T> = ?(T, List__1<T>);
type Proposal =
  {
    description : Text;
    isHolder : Bool;
    owner : ?Principal;
    status : Status;
    title : Text;
    vote : Nat
  };
type Proposal__1 = Proposal;
type Proposal__2 = Proposal__1;
type Status = {#Accepted; #Denied; #OnHold};
type Status__2 = {#Active; #Canceled; #Finished; #OnHold};
type Tournament =
  {
    boostsSetAt : Text;
    boostsSetPer : Text;
    description : Text;
    dynamicExplanation : Text;
    endDate : Text;
    externalCollections : [ExternalCollection__1];
    game : Text;
    internalCollections : [InternalCollection__1];
    name : Text;
    points : Nat;
    reward : Text;
    startDate : Text;
    status : Status__2
  };
type TournamentPlayerStats =
  {
    earned : Nat;
    lost : Nat;
    matchesLost : Nat;
    matchesWon : Nat;
    points : {externalResults : ?Nat; internalResults : ?Nat}
  };
type Trie<K, V> = {#branch : Branch<K, V>; #empty; #leaf : Leaf<K, V>};
actor {
  stable var authState :
    {
      var admins : ?[Principal];
      var allowedUsers : ?[Principal];
      var auth : ?[Principal];
      var gameServers : ?[Principal]
    };
  stable environment : Text;
  stable var proposals :
    {
      #branch : Branch<Text, Proposal__2>;
      #empty;
      #leaf : Leaf<Text, Proposal__2>
    };
  stable var stTournamentPlayerStats :
    [(Text, Principal, TournamentPlayerStats)];
  stable var tournaments :
    {
      #branch : Branch<Text, Tournament>;
      #empty;
      #leaf : Leaf<Text, Tournament>
    }
};
